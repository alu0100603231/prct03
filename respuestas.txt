21. ¿Que diferencia hay entre "\t\n" y ’\t\n’?

	Las comillas simples evalúa lo que hay dentro, si muestraramos 		por pantalla nos pondría un tabulador y un salto de línea, en 		cambio con las comillas simples pondria la cadena tal cual.
22. ¿C ́omo funciona %q? ¿Que es %q{hello world\n}? ¿Que es%q{’a’ ’b’ ’c’}?

	Pone lo que se encuentra dentro de las llaves como si fuera 		una cadena con comillas simples, pone lo de dentro tal cual 		esta
23. ¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b"
"c"}? 

	Introduce lo de dentro de las llaves como si tuvieran comillas 		dobles, la cadena helloworld con un salto de linea. la string con 		la cadena que sigue.
24. ¿Que queda en c?
irb(main):001:0> a = 4
=> 4
irb(main):002:0> b =2
=> 2
irb(main):003:0> c = <<HERE
irb(main):004:0" --#{a}--
irb(main):005:0" --#{b}--
irb(main):006:0" HERE
	Queda esto:
	=> "--4--\n--2--\n" 
	irb(main):032:0> puts c 
	--4-- 
	--2-- 
	=> nil
25. ¿Que queda en c?
irb(main):001:0> a = 4
=> 4
irb(main):002:0> b =2
=> 2
irb(main):008:0> c = <<’HERE’
irb(main):009:0’ --#{a}--
irb(main):010:0’ --#{b}--
irb(main):011:0’ HERE

	Queda esto:
	=> "--4--\n--2--\n"
	irb(main):032:0> puts c 
	--4-- 
	--2-- 
	=> nil
26.s = "hello". ¿Cual es el valor de las siguientes expresiones?
	s[0,2] = he
	s[-1,1] = o
	s[0,10] = hello
27. ¿Qué queda en g? 
>> g = "hello"
=> "hello" 
>> g << "world"
	Queda esto: => helloworld
28.¿Qué queda en e? 
>> e = ’.’*3 

	Queda esto: ... (lo repite tres veces el punto)
29.¿Cuál es el resultado? 
>> a = 1 
=> 1 
>> "#{a=a+1} "*3 
=> 222
30. ¿Que es esto? %w[this is a test]
	Crea un array de lo que hay entre corchetes, aprecen como strings 		con comillas dobles => ["this", "is", "a", "test"]
31. ¿Qué es esto? %w[\t \n] 
	=> ["\\t", "\\n"]

32. ¿Qué es esto? %W[\t \n] 

	=> ["\t", "\n"] 
	Interpreta lo que hay dentro de las comillas dobles
33. ¿Qué contiene nils? nils = Array.new(3) 
	Un array de tamaño tres 
	=> [nil, nil, nil]
34. ¿Qué contiene zeros? zeros = Array.new(3, 0) 
	Inicializa a cero los valores del array
	> nils = Array.new(3,0) 
	=> [0, 0, 0]
35. ¿Qué queda en b? 
>> x = [[1,2],[3,4]] 
=> [[1, 2], [3, 4]] 
>> b = Array.new(x) 
	Una copia del vector x 
	=> [[1, 2], [3, 4]]
36. ¿Qué queda en c? 
>> c = Array.new(3) { |i| 2*i } 
	El parámetro i es el índice
	=> [0, 2, 4]
37. ¿Cuál es el resultado de cada una de estas operaciones? 
>> a = ('a'..'e').to_a   (to_a convierte lo que recive a array)
	=> ["a", "b", "c", "d", "e"] 
>> a[1,1] 
	=> ["b"] 
>> a[-2,2] 
	=> ["d", "e"] 
>> a[0..2] 
	=> ["a", "b", "c"] 
>> a[0...1] 
	=> [0..1] 
>>a[-2..-1] 
	=> ["d", "e"]
38. ¿Cuál es el resultado de cada una de estas operaciones? 
>> a 
=> ["a", "b", "c", "d", "e"] 
>> a[0,2] = %w{A B} 
=> ["A", "B"] 
>> a 
	=> ["A", "B", "c", "d", "e"] 
>> a[2..5] = %w{C D E} 
=> ["C", "D", "E"] 
>> a 
	=> ["A", "B", "C", "D", "E"] 
>> a[0,0] = [1,2,3] 
	=> [1, 2, 3] 
>> a 
	=> [1, 2, 3, "A", "B", "C", "D", "E"]
>> a[0,2] = [] 
=> [] 
>> a 
	=> [3, "A", "B", "C", "D", "E"] 
>> a[-1,1] = [ ’Z’ ] 
=> ["Z"] 
>> a 
	=> [3, "A", "B", "C", "D", "Z"] 
>> a[-2,2] = nil 
=> nil 
>> a 
	=> [3, "A", "B", "C", nil]
39. ¿Cuál es el resultado de cada una de estas operaciones? 
>> a = (1...4).to_a
	=> [1, 2, 3, 4] 
>> a = a + [4, 5] 
	=> [1, 2, 3, 4, 4, 5] 
>> a += [[6, 7, 8]] 
	=> [1, 2, 3, 4, 4, 5, [6, 7, 8]] 
>> a = a + 9 
	=> error tienes que pasarle un array
40. ¿Cual es el resultado de cada una de estas operaciones?
>> x = %w{a b c b a}
	=>["a","b","c","b","a"]
>> x = x - %w{b c d}
	=>["a","a"]
41. ¿Cu ́al es el resultado de cada una de estas operaciones?
>> z = [0]*8
	=> [0, 0, 0, 0, 0, 0, 0, 0]
42. ¿Cuál es el resultado de cada una de estas operaciones? 
>> a = [] 
=> [] 
>> a << 1 
	=> [1] 
>> a << 2 << 3 
	=> [1, 2, 3] 
>> a << [4, 5, 6] 
	=> [1, 2, 3, [4, 5, 6]] 
>> a.concat [7, 8] 
	=> [1, 2, 3, [4, 5, 6], 7, 8]
43. ¿Cuál es el resultado de cada una de estas operaciones? 
>> a = [1, 1, 2, 2, 3, 3, 4] 
=> [1, 1, 2, 2, 3, 3, 4] 
>> b = [5,5, 4, 4, 3, 3, 2] 
=> [5, 5, 4, 4, 3, 3, 2] 
>> c = a | b
	=> [1, 2, 3, 4, 5] 
>> d = b | a 
	=> [5, 4, 3, 2, 1] 
>> e = a & b 
	=> [2, 3, 4] 
>> f = b & a 
	=> [4, 3, 2]
44. ¿Qué resultados dan las siguientes operaciones? 
>> a = 1..10 
=> 1..10
>> a.class
=> Range 
>> a.to_a 
	=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
>> b = 1...10 
=> 1....10 
>> b.to_a 
	=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
>> b.include? 10 
	=> true 
>> b.include? 8 
	=> true 
>> b.step(2) {|x| print "#{x} " } 
=> 13579=> 1..10 
>> 1..3.to_a 
	=> error
45. ¿Qué resultados dan las siguientes operaciones? 
>> r = 0...100 
=> 0....100 
>> r.member? 50 
	=> true 
>> r.include? 99.9 
	=> true 
>> r.member? 99.9 
	=> true
46. ¿Qué resultados dan las siguientes operaciones? 
>> true.class 
	=> TrueClass 
>> false.class
	=> FalseClass
>> puts "hello" if 0 
	hello 
	=> nil 
>> puts "hello" if nil
	=> nil 
>> puts "hello" if "" 
	=> hello 
	=> nil
47. ¿Qué resultados dan las siguientes operaciones? 
>> x = :sym 
=> :sym 
>> x.class 
	=> Symbol 
>> x == ’sym’ 
=> false 
>> x == :sym 
	=> true 
>> z = :’a long symbol’ 
=> :"a long symbol" 
>> z.class 
	=> Symbol 
>> x == ’sym’.to_sym 
	=> true 
>> x.to_s == ’sym’ 
	=> true
48. ¿Qué resultados se dan? 
>> s = "Ruby" 
	=> "Ruby" 
>> t = s 
	=> "Ruby" 
>> t[-1] = "" 
	=> "" 
>> print s 
	=>Rub 
>> t = "Java" 
	=> "Java" 
>> print s, t 
	RubJava => nil
49.¿Cuál es el resultado? 
>> "%d %s" % [3, "rubies"] 
	=> "3 rubies" 
	Crea una cadena pasańdole un array, y que pusiera primero un 		digito y despues un string
50. ¿Cuáles son los resultados? 
>> x, y = 4, 5 
	=> [4, 5] 
>> z = x > y ? x : y 
	=> 5 
>> x,y,z = [1,2,3] 
	=> [1, 2, 3]
51. ¿Qué resultados dan las siguientes operaciones? 
>> x = { :a => 1, :b => 2 } 
=> {:b=>2, :a=>1} 
>> x.keys 
	=> [:a, :b] 
>> x.values 
	=> [1, 2] 
>> x[:c] = 3
=> 3 
>> x 
	=> {:a=>1, :b=>2, :c=>3} 
>> x.delete(’a’) 
=> nil 
>> x 
	=> {:a=>1, :b=>2, :c=>3} 
>> x.delete(:a) 
=> 1 
>> x 
=> {:b=>2, :c=>3} 
	>> x = { :a => 1, :b => 2, :c => 4 } 
=> {:b=>2, :c=>4, :a=>1}
>> x.delete_if { |k,v| v % 2 == 0 }
	=> {:a=>1} 
>> x 
	=> {:a=>1}
52. ¿Qué hace yield 4, 5? 
	Le pasa como parámetros al bloque los valores 4 y 5.
53. ¿Qué hace la siguiente sentencia? counts = Hash.new(0) ¿Qué diferencia hay con la asignación counts = {}? 
	La primera crea un hash con claves inicializadas a cero y la 		segunda a nils
54. ¿Qué retorna esta expresión? ’hello world, hello LPP’.scan /\w+/ 
	Las palabras repetidas una o mas veces de esa cadena. 
	["hello", "world", "hello", "LPP"]
55. Explique que hacen estas sentencias: 
c = { :a => 3, :b => 2, :c => 1 } 
	Crea un hash con claves (keys) :a, :b, :c cuyos valores re 		spectivamente son 3, 2, 1. 
c.keys.sort.each { |k| puts c[k] } 
	3 
	2 
	1 
	=> [:a, :b, :c]
